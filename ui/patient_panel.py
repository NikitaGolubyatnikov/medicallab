# üìÇ –§–∞–π–ª: ui/patient_panel.py

from PyQt6.QtWidgets import (
    QWidget, QLabel, QVBoxLayout, QPushButton, QLineEdit, QHBoxLayout,
    QTableWidget, QTableWidgetItem, QComboBox, QMessageBox, QDialog, QMenu
)
from bd.database import Database
from PyQt6.QtCore import Qt, QPoint
from datetime import datetime

class PatientPanel(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ü–∞—Ü–∏–µ–Ω—Ç—ã")
        self.setFixedSize(1000, 700)

        self.db = Database()
        self.showing_archive = False

        self.setup_ui()
        self.refresh_table()

    def setup_ui(self):
        layout = QVBoxLayout()

        title = QLabel("–°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        title.setStyleSheet("font-size: 18px; font-weight: bold")
        layout.addWidget(title)

        top_bar = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É")
        self.search_input.textChanged.connect(self.refresh_table)

        self.filter_box = QComboBox()
        self.filter_box.addItems(["–í—Å–µ", "–° –ø–æ–ª–∏—Å–æ–º", "–ë–µ–∑ –ø–æ–ª–∏—Å–∞", "–ï—Å—Ç—å email", "–ù–µ—Ç email"])
        self.filter_box.currentIndexChanged.connect(self.refresh_table)

        self.toggle_archive_btn = QPushButton("–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤")
        self.toggle_archive_btn.clicked.connect(self.toggle_archive_view)

        top_bar.addWidget(self.search_input)
        top_bar.addWidget(self.filter_box)
        top_bar.addWidget(self.toggle_archive_btn)
        layout.addLayout(top_bar)

        self.table = QTableWidget()
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels([
            "ID", "–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞"
        ])
        self.table.cellDoubleClicked.connect(self.edit_patient)
        self.table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self.show_context_menu)
        layout.addWidget(self.table)

        self.add_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        self.add_btn.clicked.connect(self.add_patient)
        layout.addWidget(self.add_btn)

        self.setLayout(layout)

        self.table.setSortingEnabled(True)

    def refresh_table(self):
        search_text = self.search_input.text().lower()
        filter_value = self.filter_box.currentText()
        patients = self.db.get_patients(archived=self.showing_archive)

        filtered = []
        for p in patients:
            if search_text and search_text not in p['full_name'].lower() and search_text not in (p['phone'] or '').lower():
                continue
            if filter_value == "–° –ø–æ–ª–∏—Å–æ–º" and not p['insurance_number']:
                continue
            if filter_value == "–ë–µ–∑ –ø–æ–ª–∏—Å–∞" and p['insurance_number']:
                continue
            if filter_value == "–ï—Å—Ç—å email" and not p['email']:
                continue
            if filter_value == "–ù–µ—Ç email" and p['email']:
                continue
            filtered.append(p)

        self.table.setRowCount(len(filtered))
        for i, p in enumerate(filtered):
            self.table.setItem(i, 0, QTableWidgetItem(str(p['id'])))
            self.table.setItem(i, 1, QTableWidgetItem(p['full_name']))
            self.table.setItem(i, 2, QTableWidgetItem(p['date_of_birth'].strftime("%Y-%m-%d") if p['date_of_birth'] else ""))
            self.table.setItem(i, 3, QTableWidgetItem(p['phone'] or ""))
            self.table.setItem(i, 4, QTableWidgetItem(p['email'] or ""))
            self.table.setItem(i, 5, QTableWidgetItem(p['insurance_type'] or ""))

    def toggle_archive_view(self):
        self.showing_archive = not self.showing_archive
        self.toggle_archive_btn.setText("–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö" if self.showing_archive else "–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤")
        self.refresh_table()

    def add_patient(self):
        dialog = PatientDialog()
        if dialog.exec():
            self.refresh_table()

    def edit_patient(self, row, _):
        patient_id = int(self.table.item(row, 0).text())
        dialog = PatientDialog(patient_id)
        if dialog.exec():
            self.refresh_table()

    def show_context_menu(self, pos: QPoint):
        index = self.table.indexAt(pos)
        if not index.isValid():
            return

        row = index.row()
        patient_id = int(self.table.item(row, 0).text())

        menu = QMenu()
        archive_action = menu.addAction("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if not self.showing_archive else "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        action = menu.exec(self.table.mapToGlobal(pos))

        if action == archive_action:
            try:
                self.db.set_patient_archive(patient_id, archive=not self.showing_archive)
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–°—Ç–∞—Ç—É—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω")
                self.refresh_table()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

class PatientDialog(QDialog):
    def __init__(self, patient_id=None):
        super().__init__()
        self.db = Database()
        self.patient_id = patient_id

        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞" if patient_id else "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        self.setFixedSize(400, 400)

        layout = QVBoxLayout()
        self.inputs = {}

        for label in ["–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email", "–ü–∞—Å–ø–æ—Ä—Ç", "–ù–æ–º–µ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏", "–¢–∏–ø —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏"]:
            layout.addWidget(QLabel(label))
            inp = QLineEdit()
            self.inputs[label] = inp
            layout.addWidget(inp)

        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save)
        layout.addWidget(self.save_btn)

        self.setLayout(layout)

        if patient_id:
            self.load_patient()

    def load_patient(self):
        p = self.db.get_patient_by_id(self.patient_id)
        if p:
            self.inputs["–§–ò–û"].setText(p['full_name'])
            self.inputs["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)"].setText(str(p['date_of_birth']) if p['date_of_birth'] else "")
            self.inputs["–¢–µ–ª–µ—Ñ–æ–Ω"].setText(p['phone'] or "")
            self.inputs["Email"].setText(p['email'] or "")
            self.inputs["–ü–∞—Å–ø–æ—Ä—Ç"].setText(p['passport_series_number'] or "")
            self.inputs["–ù–æ–º–µ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏"].setText(p['insurance_number'] or "")
            self.inputs["–¢–∏–ø —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏"].setText(p['insurance_type'] or "")

    def save(self):
        date_str = self.inputs["–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)"].text().strip()
        try:
            date_of_birth = datetime.strptime(date_str, "%Y-%m-%d").date()
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1990-12-31)")
            return

        data = {
            'full_name': self.inputs["–§–ò–û"].text().strip(),
            'date_of_birth': date_of_birth,
            'phone': self.inputs["–¢–µ–ª–µ—Ñ–æ–Ω"].text().strip(),
            'email': self.inputs["Email"].text().strip(),
            'passport_series_number': self.inputs["–ü–∞—Å–ø–æ—Ä—Ç"].text().strip(),
            'insurance_number': self.inputs["–ù–æ–º–µ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏"].text().strip(),
            'insurance_type': self.inputs["–¢–∏–ø —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏"].text().strip()
        }

        try:
            if self.patient_id:
                self.db.update_patient(self.patient_id, data)
            else:
                self.db.add_patient(
                    data['full_name'],
                    data['date_of_birth'],
                    data['passport_series_number'],
                    data['phone'],
                    data['email'],
                    data['insurance_number'],
                    data['insurance_type']
                )

            self.accept()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

if __name__ == "__main__":
    import sys
    from PyQt6.QtWidgets import QApplication
    app = QApplication(sys.argv)
    win = PatientPanel()
    win.show()
    sys.exit(app.exec())
